{"version":3,"sources":["Components/App/DragDrop.tsx","Components/App/App.tsx","reportWebVitals.js","index.js"],"names":["DragDrop","useState","name","category","bgcolor","tasks","setTasks","onDragOver","ev","preventDefault","onDrageStart","id","dataTransfer","setData","onDrop","cat","getData","newTasks","map","item","push","className","e","currentTarget","filter","indexItem","draggable","onDragStart","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iOAsGeA,EAjGE,SAAC,GAAuB,eACvC,MAA0BC,mBAAS,CACjC,CAAEC,KAAM,UAAWC,SAAU,MAAOC,QAAS,UAC7C,CAAEF,KAAM,QAASC,SAAU,MAAOC,QAAS,QAC3C,CAAEF,KAAM,MAAOC,SAAU,WAAYC,QAAS,aAHhD,mBAAOC,EAAP,KAAcC,EAAd,KAOMC,EAAa,SAACC,GAClBA,EAAGC,kBAGCC,EAAe,SACnBF,EAMAG,GAEAH,EAAGI,aAAaC,QAAQ,KAAMF,IAG1BG,EAAS,SAACN,EAA6CO,GAC3D,IAAMJ,EAAKH,EAAGI,aAAaI,QAAQ,MAE7BC,EAAgB,GACtBZ,EAAMa,KAAI,SAACC,GACLA,EAAKjB,OAASS,IAChBQ,EAAKhB,SAAWY,GAElBE,EAASG,KAAKD,MAGhBb,EAASW,IAGX,OACE,sBAAKI,UAAU,gBAAf,0BAEE,0BAASA,UAAU,gBAAnB,UACE,sBACEA,UAAU,kBACVV,GAAG,MACHG,OAAQ,SAACQ,GAAD,OAAOR,EAAOQ,EAAGA,EAAEC,cAAcZ,KACzCJ,WAAY,SAACe,GACXf,EAAWe,IALf,UAQE,qCACA,qBAAKD,UAAU,oBAAf,SACGhB,GACCA,EACGmB,QAAO,SAACL,GAAD,MAA4B,QAAlBA,EAAKhB,YACtBe,KAAI,SAACC,EAAMM,GAAP,OACH,8BACE,qBACEJ,UAAU,YACVK,WAAW,EACXC,YAAa,SAACL,GAAD,OAAOZ,EAAaY,EAAGH,EAAKjB,OAH3C,SAKGiB,EAAKjB,QANAuB,WAYpB,sBACEJ,UAAU,kBACVV,GAAG,WACHG,OAAQ,SAACQ,GAAD,OAAOR,EAAOQ,EAAGA,EAAEC,cAAcZ,KACzCJ,WAAY,SAACe,GACXf,EAAWe,IALf,UAQE,0CACA,qBAAKD,UAAU,oBAAf,SACGhB,GACCA,EACGmB,QAAO,SAACL,GAAD,MAA4B,aAAlBA,EAAKhB,YACtBe,KAAI,SAACC,EAAMM,GAAP,OACH,qBAEEJ,UAAU,YACVK,WAAW,EACXC,YAAa,SAACL,GAAD,OAAOZ,EAAaY,EAAGH,EAAKjB,OAJ3C,SAMGiB,EAAKjB,MALDuB,kBCxEVG,EAZH,WACV,OACE,sBAAKP,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,yBACA,yBAASA,UAAU,aAAnB,SACE,cAAC,EAAD,MAEF,qBAAKA,UAAU,YAAf,qCCCSQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.05689976.chunk.js","sourcesContent":["import * as React from \"react\";\nimport { useState } from \"react\";\n\nexport interface DragDropProps {}\n\nconst DragDrop = ({}: DragDropProps) => {\n  const [tasks, setTasks] = useState([\n    { name: \"Angular\", category: \"wip\", bgcolor: \"yellow\" },\n    { name: \"React\", category: \"wip\", bgcolor: \"pink\" },\n    { name: \"Vue\", category: \"complete\", bgcolor: \"skyblue\" },\n\n  ]);\n\n  const onDragOver = (ev: React.SyntheticEvent<EventTarget>) => {\n    ev.preventDefault();\n  };\n\n  const onDrageStart = (\n    ev:\n      | DataTransfer\n      | React.SyntheticEvent<EventTarget>\n      | React.DragEvent\n      | JSX.Element\n      | any,\n    id: string\n  ) => {\n    ev.dataTransfer.setData(\"id\", id);\n  };\n\n  const onDrop = (ev: React.SyntheticEvent<EventTarget> | any, cat: string) => {\n    const id = ev.dataTransfer.getData(\"id\");\n\n    const newTasks: any = [];\n    tasks.map((item) => {\n      if (item.name === id) {\n        item.category = cat;\n      }\n      newTasks.push(item);\n    });\n\n    setTasks(newTasks);\n  };\n\n  return (\n    <div className=\"containerDrag\">\n      Drag and drop\n      <section className=\"taskContainer\">\n        <div\n          className=\"taskWipComplete\"\n          id=\"wip\"\n          onDrop={(e) => onDrop(e, e.currentTarget.id)}\n          onDragOver={(e) => {\n            onDragOver(e);\n          }}\n        >\n          <h1>WIP</h1>\n          <div className=\"eachTaskContainer\">\n            {tasks &&\n              tasks\n                .filter((item) => item.category === \"wip\")\n                .map((item, indexItem) => (\n                  <div key={indexItem}>\n                    <div\n                      className=\"draggable\"\n                      draggable={true}\n                      onDragStart={(e) => onDrageStart(e, item.name)}\n                    >\n                      {item.name}\n                    </div>\n                  </div>\n                ))}\n          </div>\n        </div>\n        <div\n          className=\"taskWipComplete\"\n          id=\"complete\"\n          onDrop={(e) => onDrop(e, e.currentTarget.id)}\n          onDragOver={(e) => {\n            onDragOver(e);\n          }}\n        >\n          <h1>Complete</h1>\n          <div className=\"eachTaskContainer\">\n            {tasks &&\n              tasks\n                .filter((item) => item.category === \"complete\")\n                .map((item, indexItem) => (\n                  <div\n                    key={indexItem}\n                    className=\"draggable\"\n                    draggable={true}\n                    onDragStart={(e) => onDrageStart(e, item.name)}\n                  >\n                    {item.name}\n                  </div>\n                ))}\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n};\nexport default DragDrop;\n","import \"../Styling/App.css\";\nimport React from \"react\";\nimport DragDrop from \"./DragDrop\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">Task Master</header>\n      <section className=\"AppContent\">\n        <DragDrop />\n      </section>\n      <div className=\"AppFooter\">Created by sayKaren</div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App.tsx';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}