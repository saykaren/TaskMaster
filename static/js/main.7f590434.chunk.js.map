{"version":3,"sources":["Components/App/DragDrop.tsx","Components/App/App.tsx","reportWebVitals.js","index.js"],"names":["DragDrop","useState","name","category","bgcolor","tasks","setTasks","onDragOver","ev","preventDefault","onDrageStart","id","dataTransfer","setData","console","log","onPanStart","itemName","itemCategory","type","target","touches","newTasks","map","item","push","onDrop","cat","getData","className","e","currentTarget","filter","indexItem","draggable","onDragStart","onTouchStart","onTouchMove","onTouchEnd","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7f590434.chunk.js","sourcesContent":["import * as React from \"react\";\nimport { useState } from \"react\";\nimport sayKaren from \"../../Assets/sayKaren_Black.png\";\n\nexport interface DragDropProps {}\n\nconst DragDrop = ({}: DragDropProps) => {\n  const [tasks, setTasks] = useState([\n    { name: \"Clean car\", category: \"wip\", bgcolor: \"yellow\" },\n    { name: \"Laundry\", category: \"wip\", bgcolor: \"pink\" },\n    { name: \"Code\", category: \"wip\", bgcolor: \"skyblue\" },\n    { name: \"Cook\", category: \"wip\", bgcolor: \"skyblue\" },\n    { name: \"Workout\", category: \"wip\", bgcolor: \"skyblue\" },\n  ]);\n\n  const onDragOver = (ev: React.SyntheticEvent<EventTarget>) => {\n    ev.preventDefault();\n  };\n\n  const onDrageStart = (\n    ev:\n      | DataTransfer\n      | React.SyntheticEvent<EventTarget>\n      | React.DragEvent\n      | JSX.Element\n      | any,\n    id: string\n  ) => {\n    ev.dataTransfer.setData(\"id\", id);\n    console.log({ id });\n    console.log({ ev });\n  };\n\n  const onPanStart = (\n    ev:\n      | DataTransfer\n      | React.SyntheticEvent<EventTarget>\n      | React.DragEvent\n      | JSX.Element\n      | any,\n    itemName: string,\n    itemCategory: string\n  ) => {\n    // console.log({ itemName });\n    // console.log({ ev });\n    // const startIt = ev.type;\n    // console.log({ startIt });\n    if (ev.type === \"touchstart\") {\n      // const testing = ev.changedTouches[0].target;\n    }\n    if (ev.type === \"touchmove\") {\n      const moving = ev.target;\n      // got to work on\n    }\n    if (ev.type === \"touchend\") {\n      // console.log({ ev });\n      ev.touches = { itemName: itemName, itemCategory: itemCategory };\n      const newTasks: any = [];\n      tasks.map((item) => {\n        if (item.name === itemName) {\n          item.category =\n            ev.touches.itemCategory === \"wip\" ? \"complete\" : \"wip\";\n        }\n        newTasks.push(item);\n      });\n      console.log({ newTasks });\n      setTasks(newTasks);\n    }\n  };\n\n  const onDrop = (ev: React.SyntheticEvent<EventTarget> | any, cat: string) => {\n    const id = ev.dataTransfer.getData(\"id\");\n\n    const newTasks: any = [];\n    tasks.map((item) => {\n      if (item.name === id) {\n        item.category = cat;\n      }\n      newTasks.push(item);\n    });\n\n    setTasks(newTasks);\n  };\n\n  return (\n    <div className=\"containerDrag\">\n      Drag and drop\n      <section className=\"taskContainer\">\n        <div\n          className=\"taskWipComplete\"\n          id=\"wip\"\n          onDrop={(e) => onDrop(e, e.currentTarget.id)}\n          onDragOver={(e) => {\n            onDragOver(e);\n          }}\n        >\n          <h1>WIP</h1>\n          <div className=\"eachTaskContainer\">\n            {tasks &&\n              tasks\n                .filter((item) => item.category === \"wip\")\n                .map((item, indexItem) => (\n                  <div key={indexItem}>\n                    <div\n                      className=\"draggable WIP\"\n                      draggable={true}\n                      onDragStart={(e) => onDrageStart(e, item.name)}\n                      onTouchStart={(e) =>\n                        onPanStart(e, item.name, item.category)\n                      }\n                      onTouchMove={(e) =>\n                        onPanStart(e, item.name, item.category)\n                      }\n                      onTouchEnd={(e) =>\n                        onPanStart(e, item.name, item.category)\n                      }\n                    >\n                      {item.name}\n                    </div>\n                  </div>\n                ))}\n          </div>\n        </div>\n        <div\n          className=\"taskWipComplete\"\n          id=\"complete\"\n          onDrop={(e) => onDrop(e, e.currentTarget.id)}\n          onDragOver={(e) => {\n            onDragOver(e);\n          }}\n        >\n          <h1>Complete</h1>\n          <div className=\"eachTaskContainer\">\n            {tasks &&\n              tasks\n                .filter((item) => item.category === \"complete\")\n                .map((item, indexItem) => (\n                  <div\n                    key={indexItem}\n                    className=\"draggable complete\"\n                    draggable={true}\n                    onDragStart={(e) => onDrageStart(e, item.name)}\n                    onTouchStart={(e) =>\n                      onPanStart(e, item.name, item.category)\n                    }\n                    onTouchMove={(e) =>\n                      onPanStart(e, item.name, item.category)\n                    }\n                    onTouchEnd={(e) =>\n                      onPanStart(e, item.name, item.category)\n                    }\n                  >\n                    {item.name}\n                  </div>\n                ))}\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n};\nexport default DragDrop;\n","import \"../Styling/App.css\";\nimport React from \"react\";\nimport DragDrop from \"./DragDrop\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">Task Master</header>\n      <section className=\"AppContent\">\n        <DragDrop />\n      </section>\n      <div className=\"AppFooter\">Created by sayKaren</div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App.tsx';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}